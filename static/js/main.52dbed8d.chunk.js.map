{"version":3,"sources":["Container/index.js","Fotter/index.js","Form/index.js","Section/index.js","Buttons/index.js","Tasks/index.js","Header/index.js","App.js","reportWebVitals.js","index.js"],"names":["Container","children","className","Fotter","href","Form","addNewTask","useState","newTaskContent","setNewTaskContent","onSubmit","event","preventDefault","trim","placeholder","name","value","onChange","target","type","Section","title","body","extraHeaderContent","Buttons","hideDoneTasks","tasks","toggleHideDoneTasks","markAllTasksDone","length","onClick","disabled","every","isDone","Tasks","toggleTaskDone","removeTask","map","task","id","content","Header","getTasksFromLocalStorage","tasksFromLocalStorage","localStorage","getItem","JSON","parse","App","setHideDoneTasks","setTasks","useEffect","setItem","stringify","Fragment","taskId","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52dbed8d.chunk.js","sourcesContent":["import \"./style.css\";\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">{ children }</main>\r\n);\r\n\r\nexport default Container;","import \"./style.css\";\r\n\r\nconst Fotter = () => (\r\n    <footer className=\"footer\">\r\n        <p className=\"footer__paragraph\">\r\n            Aplikacja wykonana w ramach kursu \r\n            <a className=\"footer__link\" href=\"https://youcode.pl\">\r\n                YouCode\r\n            </a>\r\n        </p>\r\n    </footer>\r\n);\r\n\r\nexport default Fotter;","import { useState } from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (newTaskContent !== \"\") {\r\n            addNewTask(newTaskContent.trim());\r\n            setNewTaskContent(\"\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form\r\n            className=\"form\"\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <input\r\n                className=\"form__field\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                name=\"newTask\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <input\r\n                className=\"form__submit\"\r\n                type=\"submit\"\r\n                value=\"Dodaj zadanie\"\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import \"./style.css\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent}) => (\r\n    <section className=\"section\">\r\n        <header className=\"section__header\">\r\n            <h2 className=\"section__title\">\r\n                {title}\r\n            </h2>\r\n            {extraHeaderContent}\r\n        </header>\r\n        <div className=\"section__body\">\r\n            {body}\r\n        </div>\r\n    </section> \r\n);\r\n\r\nexport default Section;","import \"./style.css\";\r\n\r\nconst Buttons = ({ hideDoneTasks, tasks, toggleHideDoneTasks, markAllTasksDone }) => {\r\n    if (tasks.length > 0) {\r\n        return (\r\n            <div className=\"buttons\">\r\n                <button\r\n                    className=\"buttons__button\"\r\n                    onClick={toggleHideDoneTasks}\r\n                >\r\n                    {hideDoneTasks ? \"pokaÅ¼\" : \"ukryj\"} ukoÅ„czone\r\n                </button>\r\n                <button\r\n                    className=\"buttons__button\"\r\n                    disabled={tasks.every(({ isDone }) => isDone)}\r\n                    onClick={markAllTasksDone}\r\n                >\r\n                    ukoÅ„cz wszystkie\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default Buttons;","import \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDoneTasks, toggleTaskDone, removeTask }) => (\r\n    <ul className=\"tasks\">\r\n        {tasks.map(task => (\r\n            <li\r\n                key={task.id}\r\n                className={`tasks__item${(task.isDone && hideDoneTasks)\r\n                        ? \" tasks__item--hidden\"\r\n                        : \"\"}\r\n                    `}\r\n            >\r\n                <button\r\n                    className=\"tasks__button tasks__button--toggleTask\"\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                >\r\n                    {task.isDone ? \"âœ”\" : \"\"}\r\n                </button>\r\n                <span\r\n                    className={task.isDone ? \"tasks__item--special\" : \"\"}\r\n                >\r\n                    {task.content}\r\n                </span>\r\n                <button\r\n                    className=\"tasks__button tasks__button--remove\"\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    ðŸ—‘\r\n                </button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;","const Header = ({ title }) => (\r\n    <header>\r\n          <h1>{title}</h1>\r\n    </header> \r\n);\r\n\r\nexport default Header;","import React, { useState, useEffect } from \"react\";\r\nimport Container from \"./Container\";\r\nimport Fotter from \"./Fotter\";\r\nimport Form from \"./Form\";\r\nimport Section from \"./Section\";\r\nimport Buttons from \"./Buttons\";\r\nimport Tasks from \"./Tasks\";\r\nimport Header from \"./Header\";\r\n\r\nconst getTasksFromLocalStorage = () => {\r\n  const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\r\n\r\n  return (tasksFromLocalStorage\r\n    ? JSON.parse(tasksFromLocalStorage)\r\n    : []);\r\n};\r\n\r\nfunction App() {\r\n\r\n  const [hideDoneTasks, setHideDoneTasks] = useState(false);\r\n  const [tasks, setTasks] = useState(getTasksFromLocalStorage);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const toggleHideDoneTasks = () => {\r\n    setHideDoneTasks(hideDoneTasks => !hideDoneTasks);\r\n  };\r\n\r\n  const addNewTask = (newTaskContent) => {\r\n    setTasks(tasks => [\r\n      ...tasks,\r\n      {\r\n        id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1,\r\n        content: newTaskContent,\r\n        isDone: false\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const removeTask = (taskId) => {\r\n    setTasks(tasks => tasks.filter(task => task.id !== taskId));\r\n  };\r\n\r\n  const toggleTaskDone = (taskId) => {\r\n    setTasks(tasks => tasks.map(task => {\r\n      if (task.id === taskId) {\r\n        return { ...task, isDone: !task.isDone };\r\n      }\r\n\r\n      return task;\r\n    }));\r\n  };\r\n\r\n  const markAllTasksDone = () => {\r\n    setTasks(tasks => tasks.map(task => ({ ...task, isDone: true, })));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container>\r\n        <Header\r\n          title=\"Lista zadaÅ„\"\r\n        />\r\n        <Section\r\n          title=\"Dodaj nowe zadanie\"\r\n          body={<Form addNewTask={addNewTask} />}\r\n        />\r\n        <Section\r\n          title=\"Lista zadaÅ„\"\r\n          body={\r\n            <Tasks\r\n              tasks={tasks}\r\n              hideDoneTasks={hideDoneTasks}\r\n              toggleTaskDone={toggleTaskDone}\r\n              removeTask={removeTask}\r\n            />\r\n          }\r\n          extraHeaderContent={\r\n            <Buttons\r\n              hideDoneTasks={hideDoneTasks}\r\n              tasks={tasks}\r\n              toggleHideDoneTasks={toggleHideDoneTasks}\r\n              markAllTasksDone={markAllTasksDone}\r\n            />\r\n          }\r\n        />\r\n      </Container>\r\n      <Fotter />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}