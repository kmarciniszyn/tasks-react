{"version":3,"sources":["common/Container/styled.js","common/Container/index.js","common/Footer/styled.js","common/Footer/index.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","common/Section/styled.js","common/Section/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","common/Header/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","globalStyle.js","store.js","index.js","theme.js"],"names":["Main","styled","main","Container","children","Wrapper","footer","Paragraph","p","theme","colors","mediumGray","Link","a","darkGray","Footer","href","tasksSlice","createSlice","name","initialState","tasks","hideDoneTasks","reducers","addTask","newTask","payload","push","toggleHideDoneTasks","state","toggleTaskDone","taskId","index","findIndex","task","id","isDone","removeTask","splice","markAllTasksDone","map","actions","selectTasks","form","breakpoints","mobileMaxWidth","Field","input","gray","Submit","primary","white","Form","useState","newTaskContent","setNewTaskContent","newTaskInputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","nanoid","content","current","focus","ref","placeholder","value","onChange","target","type","section","Header","header","Title","h2","Body","div","Section","title","body","extraHeaderContent","Button","button","Buttons","useSelector","length","onClick","disabled","every","List","ul","Item","li","lightGray","hidden","css","remove","red","toggleDone","green","Content","span","TasksList","Tasks","Fragment","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.7401a89d.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    max-width: 1000px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>{children}</Main>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.footer`\r\n    margin: 0 auto;\r\n    max-width: 1000px;\r\n    padding: 20px;\r\n`;\r\n\r\nexport const Paragraph = styled.p`\r\n    color: ${({ theme }) => theme.colors.mediumGray};\r\n    text-align: center;\r\n`;\r\n\r\nexport const Link = styled.a`\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.colors.darkGray};\r\n    transition: filter 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(140%);\r\n    }\r\n`;","import { Wrapper, Paragraph, Link } from './styled';\r\n\r\nconst Footer = () => (\r\n    <Wrapper>\r\n        <Paragraph>\r\n            Aplikacja wykonana w ramach kursu\r\n            <Link href=\"https://youcode.pl\">\r\n                YouCode\r\n            </Link>\r\n        </Paragraph>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Footer;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDoneTasks: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: newTask }) => {\r\n            tasks.push(newTask);\r\n        },\r\n        toggleHideDoneTasks: state => {\r\n            state.hideDoneTasks = !state.hideDoneTasks;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(task => task.id === taskId);\r\n            tasks[index].isDone = !tasks[index].isDone;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(task => task.id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        markAllTasksDone: ({ tasks }) => {\r\n            tasks.map(task => task.isDone = true);\r\n        },\r\n    }\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDoneTasks,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    markAllTasksDone\r\n} = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n    padding: 10px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.mobileMaxWidth}px) {    \r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Field = styled.input`\r\n    padding: 10px;\r\n    border: 2px solid ${({ theme }) => theme.colors.gray};\r\n`;\r\n\r\nexport const Submit = styled.input`\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.colors.primary};\r\n    color: ${({ theme }) => theme.colors.white};\r\n    border: none;\r\n    transition: filter 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(140%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(150%);\r\n    }\r\n`;","import { nanoid } from '@reduxjs/toolkit';\r\nimport { useState, useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addTask } from '../tasksSlice';\r\nimport { Wrapper, Field, Submit } from './styled';\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const newTaskInputRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (trimmedNewTaskContent !== \"\") {\r\n            dispatch(addTask({\r\n                id: nanoid(),\r\n                content: trimmedNewTaskContent,\r\n                isDone: false,\r\n            }));\r\n\r\n            setNewTaskContent(\"\");\r\n            newTaskInputRef.current.focus();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Wrapper\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Field\r\n                ref={newTaskInputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                name=\"newTask\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Submit\r\n                type=\"submit\"\r\n                value=\"Dodaj zadanie\"\r\n            />\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background-color: ${({ theme }) => theme.colors.white};\r\n    box-shadow: 0px 0px 2px 0px ${({ theme }) => theme.colors.gray};\r\n    margin: 10px 0;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.gray};\r\n    padding: 20px;\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 10px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobileMaxWidth}px){\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 10px;\r\n`;","import { Wrapper, Header, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent}) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper> \r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.colors.primary};\r\n    border: none;\r\n    padding: 10px;\r\n    transition: filter 0.5s;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.mobileMaxWidth}px){\r\n        flex-basis: 100%;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(140%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(150%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.colors.gray};\r\n    }\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Wrapper, Button } from \"./styled\";\r\nimport { selectTasks, toggleHideDoneTasks, markAllTasksDone } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const { tasks, hideDoneTasks } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    if (tasks.length > 0) {\r\n        return (\r\n            <Wrapper>\r\n                <Button\r\n                    onClick={() => dispatch(toggleHideDoneTasks())}\r\n                >\r\n                    {hideDoneTasks ? \"pokaż\" : \"ukryj\"} ukończone\r\n                </Button>\r\n                <Button\r\n                    disabled={tasks.every(({ isDone }) => isDone)}\r\n                    onClick={() => dispatch(markAllTasksDone())}\r\n                >\r\n                    ukończ wszystkie\r\n                </Button>\r\n            </Wrapper>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default Buttons;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.lightGray};\r\n    grid-gap: 20px;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.colors.white};\r\n    border: none;\r\n    width: 30px;\r\n    height: 30px;\r\n    transition: filter 0.5s;\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.colors.red};\r\n    `}\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.colors.green};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(120%);\r\n    }\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ isDone }) => isDone && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;","import { useDispatch, useSelector } from 'react-redux';\r\nimport { List, Item, Button, Content } from './styled';\r\nimport { selectTasks, toggleTaskDone, removeTask } from '../tasksSlice';\r\n\r\nconst TasksList = () => {\r\n    const { tasks, hideDoneTasks } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.isDone && hideDoneTasks}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.isDone ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content\r\n                        isDone={task.isDone}\r\n                    >\r\n                        {task.content}\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TasksList;","const Header = ({ title }) => (\r\n    <header>\r\n          <h1>{title}</h1>\r\n    </header> \r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Container from \"../../common/Container\";\r\nimport Footer from \"../../common/Footer\";\r\nimport Form from \"./Form\";\r\nimport Section from \"../../common/Section\";\r\nimport Buttons from \"./Buttons\";\r\nimport TasksList from \"./TasksList\";\r\nimport Header from \"../../common/Header\";\r\n\r\nconst Tasks = () => (\r\n  <React.Fragment>\r\n    <Container>\r\n      <Header\r\n        title=\"Lista zadań\"\r\n      />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={<TasksList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </Container>\r\n    <Footer />\r\n  </React.Fragment>\r\n);\r\n\r\n\r\nexport default Tasks;","import React from 'react';\r\nimport Tasks from './features/tasks/Tasks';\r\n\r\nconst App = () => <Tasks />;\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::before, ::after {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n        background: ${({ theme }) => theme.colors.lightGray};\r\n    }\r\n`;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: { \r\n        tasks: tasksReducer,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from 'styled-components';\nimport { Provider } from 'react-redux';\nimport { theme } from './theme';\nimport { GlobalStyle } from './globalStyle';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    colors: {\r\n        primary: \"teal\",\r\n        white: \"#fff\",\r\n        gray: \"#ddd\",\r\n        lightGray: \"#eee\",\r\n        mediumGray: \"#666\",\r\n        darkGray: \"#333\",\r\n        green: \"#008000\",\r\n        red: \"#cc0000\",        \r\n    },\r\n    breakpoints: {\r\n        mobileMaxWidth: 767,\r\n    },\r\n};"],"sourceRoot":""}