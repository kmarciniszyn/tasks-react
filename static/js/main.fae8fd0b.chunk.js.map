{"version":3,"sources":["common/Container/styled.js","common/Container/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","features/author/Author.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Button/index.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksList/styled.js","routes.js","features/tasks/queryParameters.js","searchQueryParamName.js","features/tasks/TasksList/index.js","features/tasks/TasksPage/Field/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/SampleTasks/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","common/Footer/styled.js","common/Footer/index.js","Navigation/styled.js","Navigation/index.js","App.js","reportWebVitals.js","globalStyle.js","features/tasks/getSampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["Main","styled","main","Container","children","Wrapper","section","theme","colors","white","gray","Header","header","breakpoints","mobileMaxWidth","Title","h2","Body","div","Section","title","body","extraHeaderContent","Author","Button","button","primary","localStorageTasksKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDoneTasks","loadingSampleTasks","reducers","addTask","newTask","payload","push","toggleHideDoneTasks","state","toggleTaskDone","taskId","index","findIndex","task","id","isDone","removeTask","splice","markAllTasksDone","map","fetchSampleTasks","fetchSampleTasksSuccess","fetchSampleTasksError","selectTasksState","selectTasks","selectHideDoneTasks","selectIsEveryTasksDone","every","selectAreTasksEmpty","length","selectLoadindSampleTasks","actions","Buttons","useSelector","isEveryTasksDone","areTasksEmpty","dispatch","useDispatch","onClick","disabled","List","ul","Item","li","lightGray","hidden","css","remove","red","toggleDone","green","Content","span","StyledLink","Link","toTask","useQueryParameter","key","location","useLocation","URLSearchParams","search","get","searchQueryParamName","TasksList","query","trim","filter","content","toUpperCase","includes","selectTaskByQuery","to","Field","input","Search","replaceQueryParameter","history","useHistory","value","searchParams","set","delete","pathname","useReplaceQueryParameter","placeholder","onChange","target","undefined","form","Submit","Form","useState","newTaskContent","setNewTaskContent","newTaskInputRef","useRef","onSubmit","event","preventDefault","trimmedNewTaskContent","nanoid","current","focus","ref","type","SampleTasks","TasksPage","TaskPage","useParams","find","selectTaskById","footer","Paragraph","p","mediumGray","a","darkGray","Footer","href","activeClassName","StyledNavLink","NavLink","attrs","StyledNav","nav","StyledUl","StyledLi","Navigation","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","getSampleTasks","fetch","response","Error","statusText","json","fetchSampleTasksHandler","saveTasksInLocalStorageHandler","watchFetchSampleTasks","delay","call","sampleTasks","put","alert","select","takeLatest","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fae8fd0b.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    max-width: 1000px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>{children}</Main>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background-color: ${({ theme }) => theme.colors.white};\r\n    box-shadow: 0px 0px 2px 0px ${({ theme }) => theme.colors.gray};\r\n    margin: 10px 0;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.gray};\r\n    padding: 20px;\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 10px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobileMaxWidth}px){\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import { Wrapper, Header, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent}) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper> \r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n    <header>\r\n          <h1>{title}</h1>\r\n    </header> \r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Container from \"../../common/Container\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\n\r\nconst Author = () => (\r\n    <Container>\r\n        <Header\r\n            title=\"O autorze\"\r\n        />\r\n        <Section\r\n            title=\"Karolina Marciniszyn\"\r\n            body={\r\n                <p>Moje studia dały mi inspirację do nauki programowania. Wybrałam specjalność <b>informatyka\r\n                    medyczna</b> na kierunku <strong>inżynieria biomedyczna</strong>. Choć sam kierunek\r\n                    nieszczególnie przypadł mi do gustu, tak zajęcia z programowania dawały mi bardzo dużo radości\r\n                    i satysfakcji z efektów końcowych. Nie wyobrażam sobie iść w innym kierunku niż programowanie,\r\n                    które stało się moim marzeniem, planem na przyszłość, do którego stopniowo dążę.</p>\r\n            }\r\n        />\r\n    </Container>\r\n);\r\n\r\nexport default Author;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;","import styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.colors.primary};\r\n    border: none;\r\n    transition: filter 0.5s;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.mobileMaxWidth}px){\r\n        flex-basis: 100%;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(140%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(150%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.colors.gray};\r\n    }\r\n`;\r\n\r\nexport default Button;","const localStorageTasksKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = (tasks) => \r\n    localStorage.setItem(localStorageTasksKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => \r\n    JSON.parse(localStorage.getItem(localStorageTasksKey)) || [];","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDoneTasks: false,\r\n        loadingSampleTasks: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: newTask }) => {\r\n            tasks.push(newTask);\r\n        },\r\n        toggleHideDoneTasks: state => {\r\n            state.hideDoneTasks = !state.hideDoneTasks;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(task => task.id === taskId);\r\n            tasks[index].isDone = !tasks[index].isDone;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(task => task.id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        markAllTasksDone: ({ tasks }) => {\r\n            tasks.map(task => task.isDone = true);\r\n        },\r\n        fetchSampleTasks: state => {\r\n            state.loadingSampleTasks = true;\r\n        },\r\n        fetchSampleTasksSuccess: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n            state.loadingSampleTasks = false;\r\n        },\r\n        fetchSampleTasksError: state => {\r\n            state.loadingSampleTasks = false;\r\n        },\r\n    }\r\n});\r\n\r\nexport const selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDoneTasks = state => selectTasksState(state).hideDoneTasks;\r\nexport const selectIsEveryTasksDone = state => selectTasks(state).every(({ isDone }) => isDone);\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectLoadindSampleTasks = state => selectTasksState(state).loadingSampleTasks;\r\n\r\nexport const selectTaskById = (state, taskId) => selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTaskByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n\r\n    return tasks.filter(({ content }) => content.toUpperCase().includes(query.toUpperCase()));\r\n};\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDoneTasks,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    markAllTasksDone,\r\n    fetchSampleTasks,\r\n    fetchSampleTasksSuccess,\r\n    fetchSampleTasksError,\r\n} = tasksSlice.actions;\r\n\r\nexport default tasksSlice.reducer;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Wrapper} from \"./styled\";\r\nimport Button from '../Button';\r\nimport { toggleHideDoneTasks, markAllTasksDone, selectHideDoneTasks, selectIsEveryTasksDone, selectAreTasksEmpty } from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const hideDoneTasks = useSelector(selectHideDoneTasks);\r\n    const isEveryTasksDone = useSelector(selectIsEveryTasksDone);\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const dispatch = useDispatch();\r\n\r\n    if (!areTasksEmpty) {\r\n        return (\r\n            <Wrapper>\r\n                <Button\r\n                    onClick={() => dispatch(toggleHideDoneTasks())}\r\n                >\r\n                    {hideDoneTasks ? \"pokaż\" : \"ukryj\"} ukończone\r\n                </Button>\r\n                <Button\r\n                    disabled={isEveryTasksDone}\r\n                    onClick={() => dispatch(markAllTasksDone())}\r\n                >\r\n                    ukończ wszystkie\r\n                </Button>\r\n            </Wrapper>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default Buttons;","import styled, { css } from \"styled-components\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const List = styled.ul`\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.lightGray};\r\n    grid-gap: 20px;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.colors.white};\r\n    border: none;\r\n    width: 30px;\r\n    height: 30px;\r\n    transition: filter 0.5s;\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.colors.red};\r\n    `}\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.colors.green};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(120%);\r\n    }\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ isDone }) => isDone && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    color: ${({theme}) => theme.colors.primary};\r\n    transition: filter 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(120%);\r\n    }\r\n`;","export const toTasks = () => \"/zadania\";\r\nexport const toTask = ({ id } = { id: \":id\" }) => `/zadania/${id}`;\r\nexport const toAuthor = () => \"/autor\";","import { useLocation, useHistory } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = (key) => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n    return searchParams.get(key);\r\n}\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    return ({ key, value }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        !value ? searchParams.delete(key) : searchParams.set(key, value);\r\n\r\n        history.push(`${location.pathname}?${searchParams}`);\r\n    }\r\n}\r\n","const searchQueryParamName = \"szukaj\";\r\n\r\nexport default searchQueryParamName;","import { useDispatch, useSelector } from 'react-redux';\r\nimport { List, Item, Button, Content, StyledLink } from './styled';\r\nimport { toggleTaskDone, removeTask, selectHideDoneTasks, selectTaskByQuery } from '../tasksSlice';\r\nimport { toTask } from '../../../routes';\r\nimport { useQueryParameter } from '../queryParameters';\r\nimport searchQueryParamName from '../../../searchQueryParamName';\r\n\r\nconst TasksList = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n\r\n    const tasks = useSelector(state => selectTaskByQuery(state, query));\r\n    const hideDoneTasks = useSelector(selectHideDoneTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.isDone && hideDoneTasks}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.isDone ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content\r\n                        isDone={task.isDone}\r\n                    >\r\n                        <StyledLink to={toTask({ id: task.id })}>\r\n                            {task.content}\r\n                        </StyledLink>\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TasksList;","import styled from \"styled-components\";\r\n\r\nconst Field = styled.input`\r\n    padding: 10px;\r\n    border: 2px solid ${({ theme }) => theme.colors.gray};\r\n`;\r\n\r\nexport default Field;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`;","import React from \"react\";\r\nimport Field from \"../Field\";\r\nimport { Wrapper } from \"./styled\";\r\nimport searchQueryParamName from \"../../../../searchQueryParamName\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../../queryParameters\";\r\n\r\nconst Search = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : undefined,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Field\r\n                placeholder=\"Wyszukaj zadanie...\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Search;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.mobileMaxWidth}px) {    \r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Submit = styled.input`\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.colors.primary};\r\n    color: ${({ theme }) => theme.colors.white};\r\n    border: none;\r\n    transition: filter 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(140%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(150%);\r\n    }\r\n`;","import { nanoid } from '@reduxjs/toolkit';\r\nimport { useState, useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addTask } from '../../tasksSlice';\r\nimport { Wrapper, Submit } from './styled';\r\nimport Field from \"../Field\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const newTaskInputRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (trimmedNewTaskContent !== \"\") {\r\n            dispatch(addTask({\r\n                id: nanoid(),\r\n                content: trimmedNewTaskContent,\r\n                isDone: false,\r\n            }));\r\n\r\n            setNewTaskContent(\"\");\r\n            newTaskInputRef.current.focus();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Wrapper\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Field\r\n                ref={newTaskInputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                name=\"newTask\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Submit\r\n                type=\"submit\"\r\n                value=\"Dodaj zadanie\"\r\n            />\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Form;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchSampleTasks } from '../../tasksSlice';\r\nimport Button from '../Button';\r\nimport { selectLoadindSampleTasks } from '../../tasksSlice';\r\n\r\nconst SampleTasks = () => {\r\n    const dispatch = useDispatch();\r\n    const loadingSampleTasks = useSelector(selectLoadindSampleTasks);\r\n\r\n    return (\r\n        <Button\r\n            disabled={loadingSampleTasks}\r\n            onClick={() => dispatch(fetchSampleTasks())}\r\n        >\r\n            {loadingSampleTasks ? \"Ładowanie...\" : \"pobierz przykładowe zadania\"}\r\n        </Button>\r\n    )\r\n};\r\n\r\nexport default SampleTasks;","import React from \"react\";\r\nimport Container from \"../../../common/Container\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Buttons from \"./Buttons\";\r\nimport TasksList from \"../TasksList\";\r\nimport Search from \"./Search\";\r\nimport Form from \"./Form\";\r\nimport SampleTasks from \"./SampleTasks\";\r\n\r\nconst TasksPage = () => (\r\n    <Container>\r\n        <Header\r\n            title=\"Lista zadań\"\r\n        />\r\n        <Section\r\n            title=\"Dodaj nowe zadanie\"\r\n            body={<Form />}\r\n            extraHeaderContent={<SampleTasks />}\r\n        />\r\n        <Section\r\n            title=\"Wyszukiwarka\"\r\n            body={<Search />}\r\n        />\r\n        <Section\r\n            title=\"Lista zadań\"\r\n            body={<TasksList />}\r\n            extraHeaderContent={<Buttons />}\r\n        />\r\n    </Container>\r\n);\r\n\r\nexport default TasksPage;","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport Container from '../../../common/Container';\r\nimport Section from '../../../common/Section';\r\nimport Header from '../../../common/Header';\r\nimport { selectTaskById } from '../tasksSlice';\r\n\r\nconst TaskPage = () => {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => selectTaskById(state, id));\r\n\r\n    return (\r\n        <Container>\r\n            <Header\r\n                title=\"Szczegóły zadania\"\r\n            />\r\n            <Section\r\n                title={task ? task.content : \"Nie znaleziono takiego zadania :(\"}\r\n                body={\r\n                    <>\r\n                        <strong>Ukończono:</strong> {task ? (task.isDone ? \"tak\" : \"nie\") : \"-\"}\r\n                    </>\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default TaskPage;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.footer`\r\n    margin: 0 auto;\r\n    max-width: 1000px;\r\n    padding: 20px;\r\n`;\r\n\r\nexport const Paragraph = styled.p`\r\n    color: ${({ theme }) => theme.colors.mediumGray};\r\n    text-align: center;\r\n`;\r\n\r\nexport const Link = styled.a`\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.colors.darkGray};\r\n    transition: filter 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(140%);\r\n    }\r\n`;","import { Wrapper, Paragraph, Link } from './styled';\r\n\r\nconst Footer = () => (\r\n    <Wrapper>\r\n        <Paragraph>\r\n            Aplikacja wykonana w ramach kursu\r\n            <Link href=\"https://youcode.pl\">\r\n                YouCode\r\n            </Link>\r\n        </Paragraph>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Footer;","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    &.${activeClassName} {\r\n        font-weight: bold;\r\n    }\r\n\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.colors.white};    \r\n`;\r\n\r\nexport const StyledNav = styled.nav`\r\n    background-color: ${({ theme }) => theme.colors.primary};\r\n`;\r\n\r\nexport const StyledUl = styled.ul`\r\n    list-style-type: none;\r\n    padding-left: 0px;\r\n    margin: 0px;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const StyledLi = styled.li`\r\n    margin: 20px;\r\n`;\r\n","import { StyledNavLink, StyledNav, StyledUl, StyledLi } from './styled';\r\nimport { toTasks, toAuthor } from '../routes';\r\n\r\nconst Navigation = () => (\r\n    <StyledNav>\r\n            <StyledUl>\r\n                <StyledLi>\r\n                    <StyledNavLink to={toTasks()}>\r\n                        Lista zadań\r\n                    </StyledNavLink>\r\n                </StyledLi>\r\n                <StyledLi>\r\n                    <StyledNavLink to={toAuthor()}>\r\n                        O autorze\r\n                    </StyledNavLink>\r\n                </StyledLi>\r\n            </StyledUl>\r\n        </StyledNav>\r\n);\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport Author from './features/author/Author';\r\nimport TasksPage from './features/tasks/TasksPage';\r\nimport TaskPage from './features/tasks/TaskPage';\r\nimport Footer from './common/Footer';\r\nimport Navigation from './Navigation';\r\nimport { toTasks, toTask, toAuthor } from './routes';\r\n\r\nconst App = () => (\r\n    <HashRouter>\r\n        <Navigation/>\r\n        \r\n        <Switch>\r\n            <Route path={toAuthor()}>\r\n                <Author />\r\n            </Route>\r\n            <Route path={toTask()}>\r\n                <TaskPage />\r\n            </Route>\r\n            <Route path={toTasks()}>\r\n                <TasksPage />\r\n            </Route>\r\n            <Route path=\"/\">\r\n                <Redirect to={toTasks()} />\r\n            </Route>\r\n        </Switch>\r\n        <Footer/>\r\n    </HashRouter>\r\n);\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::before, ::after {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n        background: ${({ theme }) => theme.colors.lightGray};\r\n    }\r\n`;","export const getSampleTasks = async () => {\r\n\r\n    const response = await fetch(\"/tasks-react/sampleTasks.json\");\r\n\r\n    if (!response) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n}; ","import { call, delay, put, select, takeEvery, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n    fetchSampleTasks,\r\n    selectTasks,\r\n    fetchSampleTasksSuccess,\r\n    fetchSampleTasksError\r\n} from \"./tasksSlice\";\r\nimport { getSampleTasks } from './getSampleTasks';\r\nimport { saveTasksInLocalStorage } from './tasksLocalStorage';\r\n\r\nfunction* fetchSampleTasksHandler() {\r\n    try {\r\n        yield delay(2000);\r\n        const sampleTasks = yield call(getSampleTasks);\r\n        yield put(fetchSampleTasksSuccess(sampleTasks));\r\n    } catch (error) {\r\n        yield put(fetchSampleTasksError);\r\n        yield call(alert, \"Nie udało się pobrać zadań\");\r\n    }\r\n};\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n};\r\n\r\nexport function* watchFetchSampleTasks() {\r\n    yield takeLatest(fetchSampleTasks.type, fetchSampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n};","import { all } from \"redux-saga/effects\";\r\nimport { watchFetchSampleTasks } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        watchFetchSampleTasks(),\r\n    ]);\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from 'styled-components';\nimport { Provider } from 'react-redux';\nimport { theme } from './theme';\nimport { GlobalStyle } from './globalStyle';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    colors: {\r\n        primary: \"teal\",\r\n        white: \"#fff\",\r\n        gray: \"#ddd\",\r\n        lightGray: \"#eee\",\r\n        mediumGray: \"#666\",\r\n        darkGray: \"#333\",\r\n        green: \"#008000\",\r\n        red: \"#cc0000\",        \r\n    },\r\n    breakpoints: {\r\n        mobileMaxWidth: 767,\r\n    },\r\n};"],"sourceRoot":""}