{"version":3,"sources":["Container/styled.js","Container/index.js","Footer/styled.js","Footer/index.js","Form/styled.js","Form/index.js","Section/styled.js","Section/index.js","Buttons/styled.js","Buttons/index.js","Tasks/styled.js","Tasks/index.js","Header/index.js","useTasks.js","App.js","reportWebVitals.js","globalStyle.js","index.js","theme.js"],"names":["Main","styled","main","Container","children","Wrapper","footer","Paragraph","p","theme","colors","mediumGray","Link","a","darkGray","Footer","href","form","breakpoints","mobileMaxWidth","Field","input","gray","Submit","primary","white","Form","addNewTask","useState","newTaskContent","setNewTaskContent","newTaskInputRef","useRef","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","current","focus","ref","placeholder","name","value","onChange","target","type","section","Header","header","Title","h2","Body","div","Section","title","body","extraHeaderContent","Button","button","Buttons","hideDoneTasks","tasks","toggleHideDoneTasks","markAllTasksDone","length","onClick","disabled","every","isDone","List","ul","Item","li","lightGray","hidden","css","remove","red","toggleDone","green","Content","span","Tasks","toggleTaskDone","removeTask","map","task","id","content","getTasksFromLocalStorage","tasksFromLocalStorage","localStorage","getItem","JSON","parse","App","setHideDoneTasks","setTasks","useEffect","setItem","stringify","taskId","filter","useTasks","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae8d5dad.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    max-width: 1000px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import { Main } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>{children}</Main>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.footer`\r\n    margin: 0 auto;\r\n    max-width: 1000px;\r\n    padding: 20px;\r\n`;\r\n\r\nexport const Paragraph = styled.p`\r\n    color: ${({ theme }) => theme.colors.mediumGray};\r\n    text-align: center;\r\n`;\r\n\r\nexport const Link = styled.a`\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.colors.darkGray};\r\n    transition: filter 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(140%);\r\n    }\r\n`;","import { Wrapper, Paragraph, Link } from './styled';\r\n\r\nconst Footer = () => (\r\n    <Wrapper>\r\n        <Paragraph>\r\n            Aplikacja wykonana w ramach kursu\r\n            <Link href=\"https://youcode.pl\">\r\n                YouCode\r\n            </Link>\r\n        </Paragraph>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Footer;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n    padding: 10px;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.mobileMaxWidth}px) {    \r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Field = styled.input`\r\n    padding: 10px;\r\n    border: 2px solid ${({ theme }) => theme.colors.gray};\r\n`;\r\n\r\nexport const Submit = styled.input`\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.colors.primary};\r\n    color: ${({ theme }) => theme.colors.white};\r\n    border: none;\r\n    transition: filter 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(140%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(150%);\r\n    }\r\n`;","import { useState, useRef } from 'react';\r\nimport { Wrapper, Field, Submit } from './styled';\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const newTaskInputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (trimmedNewTaskContent !== \"\") {\r\n            addNewTask(trimmedNewTaskContent);\r\n            setNewTaskContent(\"\");\r\n            newTaskInputRef.current.focus();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Wrapper\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Field\r\n                ref={newTaskInputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                name=\"newTask\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Submit\r\n                type=\"submit\"\r\n                value=\"Dodaj zadanie\"\r\n            />\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background-color: ${({ theme }) => theme.colors.white};\r\n    box-shadow: 0px 0px 2px 0px ${({ theme }) => theme.colors.gray};\r\n    margin: 10px 0;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.gray};\r\n    padding: 20px;\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 10px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobileMaxWidth}px){\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 10px;\r\n`;","import { Wrapper, Header, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent}) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper> \r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.colors.primary};\r\n    border: none;\r\n    padding: 10px;\r\n    transition: filter 0.5s;\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoints.mobileMaxWidth}px){\r\n        flex-basis: 100%;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(140%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(150%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.colors.gray};\r\n    }\r\n`;","import { Wrapper, Button } from \"./styled\";\r\n\r\nconst Buttons = ({ hideDoneTasks, tasks, toggleHideDoneTasks, markAllTasksDone }) => {\r\n    if (tasks.length > 0) {\r\n        return (\r\n            <Wrapper>\r\n                <Button\r\n                    onClick={toggleHideDoneTasks}\r\n                >\r\n                    {hideDoneTasks ? \"pokaż\" : \"ukryj\"} ukończone\r\n                </Button>\r\n                <Button\r\n                    disabled={tasks.every(({ isDone }) => isDone)}\r\n                    onClick={markAllTasksDone}\r\n                >\r\n                    ukończ wszystkie\r\n                </Button>\r\n            </Wrapper>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default Buttons;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.lightGray};\r\n    grid-gap: 20px;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.colors.white};\r\n    border: none;\r\n    width: 30px;\r\n    height: 30px;\r\n    transition: filter 0.5s;\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.colors.red};\r\n    `}\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.colors.green};\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(120%);\r\n    }\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ isDone }) => isDone && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;","import { List, Item, Button, Content } from './styled';\r\n\r\nconst Tasks = ({ tasks, hideDoneTasks, toggleTaskDone, removeTask }) => (\r\n    <List>\r\n        {tasks.map(task => (\r\n            <Item\r\n                key={task.id}\r\n                hidden={task.isDone && hideDoneTasks}\r\n            >\r\n                <Button\r\n                    toggleDone\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                >\r\n                    {task.isDone ? \"✔\" : \"\"}\r\n                </Button>\r\n                <Content\r\n                    isDone={task.isDone}\r\n                >\r\n                    {task.content}\r\n                </Content>\r\n                <Button\r\n                    remove\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    🗑\r\n                </Button>\r\n            </Item>\r\n        ))}\r\n    </List>\r\n);\r\n\r\nexport default Tasks;","const Header = ({ title }) => (\r\n    <header>\r\n          <h1>{title}</h1>\r\n    </header> \r\n);\r\n\r\nexport default Header;","import { useState, useEffect } from \"react\";\r\n\r\nconst getTasksFromLocalStorage = () => {\r\n    const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\r\n  \r\n    return (tasksFromLocalStorage\r\n      ? JSON.parse(tasksFromLocalStorage)\r\n      : []);\r\n  };\r\n\r\nexport const useTasks = () => {\r\n    const [tasks, setTasks] = useState(getTasksFromLocalStorage);\r\n  \r\n    useEffect(() => {\r\n      localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    }, [tasks]);\r\n    \r\n    const addNewTask = (newTaskContent) => {\r\n      setTasks(tasks => [\r\n        ...tasks,\r\n        {\r\n          id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1,\r\n          content: newTaskContent,\r\n          isDone: false\r\n        },\r\n      ]);\r\n    };\r\n  \r\n    const removeTask = (taskId) => {\r\n      setTasks(tasks => tasks.filter(task => task.id !== taskId));\r\n    };\r\n  \r\n    const toggleTaskDone = (taskId) => {\r\n      setTasks(tasks => tasks.map(task => {\r\n        if (task.id === taskId) {\r\n          return { ...task, isDone: !task.isDone };\r\n        }\r\n  \r\n        return task;\r\n      }));\r\n    };\r\n  \r\n    const markAllTasksDone = () => {\r\n      setTasks(tasks => tasks.map(task => ({ ...task, isDone: true, })));\r\n    };\r\n  \r\n    return {\r\n      tasks,\r\n      addNewTask,\r\n      toggleTaskDone,\r\n      removeTask,\r\n      markAllTasksDone,\r\n    };\r\n  };","import React, { useState } from \"react\";\r\nimport Container from \"./Container\";\r\nimport Footer from \"./Footer\";\r\nimport Form from \"./Form\";\r\nimport Section from \"./Section\";\r\nimport Buttons from \"./Buttons\";\r\nimport Tasks from \"./Tasks\";\r\nimport Header from \"./Header\";\r\nimport { useTasks } from \"./useTasks\";\r\n\r\nfunction App() {\r\n  const [hideDoneTasks, setHideDoneTasks] = useState(false);\r\n\r\n  const toggleHideDoneTasks = () => {\r\n    setHideDoneTasks(hideDoneTasks => !hideDoneTasks);\r\n  };\r\n\r\n  const {\r\n    tasks,\r\n    addNewTask,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    markAllTasksDone,\r\n  } = useTasks();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container>\r\n        <Header\r\n          title=\"Lista zadań\"\r\n        />\r\n        <Section\r\n          title=\"Dodaj nowe zadanie\"\r\n          body={<Form addNewTask={addNewTask} />}\r\n        />\r\n        <Section\r\n          title=\"Lista zadań\"\r\n          body={\r\n            <Tasks\r\n              tasks={tasks}\r\n              hideDoneTasks={hideDoneTasks}\r\n              toggleTaskDone={toggleTaskDone}\r\n              removeTask={removeTask}\r\n            />\r\n          }\r\n          extraHeaderContent={\r\n            <Buttons\r\n              hideDoneTasks={hideDoneTasks}\r\n              tasks={tasks}\r\n              toggleHideDoneTasks={toggleHideDoneTasks}\r\n              markAllTasksDone={markAllTasksDone}\r\n            />\r\n          }\r\n        />\r\n      </Container>\r\n      <Footer />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::before, ::after {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n        background: ${({ theme }) => theme.colors.lightGray};\r\n    }\r\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from './theme';\nimport { GlobalStyle } from './globalStyle';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    colors: {\r\n        primary: \"teal\",\r\n        white: \"#fff\",\r\n        gray: \"#ddd\",\r\n        lightGray: \"#eee\",\r\n        mediumGray: \"#666\",\r\n        darkGray: \"#333\",\r\n        green: \"#008000\",\r\n        red: \"#cc0000\",        \r\n    },\r\n    breakpoints: {\r\n        mobileMaxWidth: 767,\r\n    },\r\n};"],"sourceRoot":""}